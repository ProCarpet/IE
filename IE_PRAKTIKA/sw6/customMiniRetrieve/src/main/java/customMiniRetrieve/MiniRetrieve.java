/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package customMiniRetrieve;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

public class MiniRetrieve {
    private static final String DOCUMENT_PATH = "documents/";
    private static final String QUERRY_PATH = "queries/";

    private static Map<Integer, String> querries;
    private static Map<Integer, String> documents;

    private static Map<String,File> invIndex;
    private static Map<File,String> nonInvIndex;


    public static void main(String[] args){
       querries = readFiles(readDirectory(QUERRY_PATH));
       documents = readFiles(readDirectory(DOCUMENT_PATH));



    }

    private void indexing(Map<Integer, String> querries, Map<Integer, String> documents){
        

    }

    private static Map<Integer, String> readFiles(Map<Integer, File> files){
        Map<Integer, String> output = new HashMap<>();
        for (Map.Entry<Integer, File> integerFileEntry : files.entrySet()) {
            try(BufferedReader bf = new BufferedReader(new FileReader(integerFileEntry.getValue()))){
                String line = null;
                StringBuilder sb = new StringBuilder();
                while ((line = bf.readLine()) != null){
                     sb.append(line);
                }
                output.put(integerFileEntry.getKey(),sb.toString());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
        return output;
    }

    private static Map<Integer, File> readDirectory(String path){
        HashMap<Integer, File> map = new HashMap<>();
        try (Stream<Path> paths = Files.walk(Paths.get(path))) {
            paths
                    .filter(Files::isRegularFile)
                    .forEach(e -> map.put(Integer.valueOf(e.toFile().getName()),e.toFile()));
        }catch (IOException e){
            e.printStackTrace();
        }
        return map;
    }
}
