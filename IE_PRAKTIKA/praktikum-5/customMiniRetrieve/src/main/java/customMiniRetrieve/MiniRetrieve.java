/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package customMiniRetrieve;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MiniRetrieve {
    //private static final String DOCUMENT_PATH = "documents/";
    //private static final String QUERRY_PATH = "queries/";

    private static final String DOCUMENT_PATH = "docs_ie_col/";
    private static final String QUERY_PATH = "queries_ie_col/";


    private static Map<Integer, File> myQueries;
    private static Map<Integer, File> myDocuments;
    //Indexes
    private static final Map<String, Map<File, Integer>> invIndex = new HashMap<>();
    private static final Map<File, Map<String,Integer>> nonInvIndex = new HashMap<>();
    private static final Map<File, Map<String, Integer>> queryIndex = new HashMap<>();
    //MiniRetrive components
    private static Map<File,Double> accumulator;
    private static Map<File,Double> dNorm = new HashMap<>();
    private static Map<String,Double> idf = new HashMap<>();
    private static double qNorm = 0.0;
    private static double totalNumberOfDocuments = 0.0;

    private static final List<Integer> toBeEvaluatedQuerries = new ArrayList<>(Arrays.asList(
            2405,9125,13280,14000,14536,19982,22423,24081,35727,37845
    ));


    public static void main(String[] args) {
        myQueries = readDirectory(QUERY_PATH);
        myDocuments = readDirectory(DOCUMENT_PATH);
        //System.out.println(tokenizeString(querries.get(1)));
        createNonAndInvIndex(myDocuments);
        totalNumberOfDocuments = nonInvIndex.size();
        createQuerryIndex(myQueries);
        createIDFsAndDocNormalizers(nonInvIndex);
        processQueries(myQueries);
    }

    private static void processQueries(Map<Integer, File> queries){
        long start = System.currentTimeMillis();
        for (File querie : queries.values()) {
            qNorm = 0.0;
            accumulator = new LinkedHashMap<>();
            for (String term : tokenizeString(readFile(querie))) {
                if(!idf.containsKey(term)){
                    idf.put(term,Math.log(1.0+totalNumberOfDocuments));
                }
                double b = idf.get(term) * queryIndex.get(querie).get(term);
                qNorm += (b*b);
                if(invIndex.containsKey(term)){
                    for (File doc : invIndex.get(term).keySet()) {
                        double a = idf.get(term) * invIndex.get(term).get(doc);
                        if(accumulator.containsKey(doc)) {
                            double accuValue = accumulator.get(doc);
                            accuValue += a*b;
                            accumulator.put(doc, accuValue);
                        }
                        else accumulator.put(doc, a*b);
                    }
                }
            }

            //2e Teil hier
            qNorm = Math.sqrt(qNorm);
            for (File doc : accumulator.keySet()) {
                //normalize lenght of vectors
                accumulator.put(doc, (accumulator.get(doc)*1000.0/(dNorm.get(doc)*qNorm)));
            }
            List<Map.Entry<File, Double>> results = sortLinkedMap(accumulator);
            for(int i =0; i < 10 ; i++){
                int querrieID = Integer.parseInt(querie.toString().substring(8+7));
              if(i <5 && toBeEvaluatedQuerries.contains(querrieID)) buildEvaluationList(querie, results.get(results.size()-i-1).getKey(),querrieID);
                System.out.println(querie.toString().substring(8+7) + " Q0 " +
                        results.get(results.size()-i-1).getKey().toString().substring(10+2)
                        +"   "+ results.get(results.size()-i-1).getValue()+ " miniretrive");
            }
        }
        long endTime = System.currentTimeMillis();
        System.out.println("elapsed time =" + String.valueOf((endTime-start)/1000.0));
    }

    private static void buildLucene(File question, File result, Integer queryId){


        File output = new File("Results_lucene");
        String readFile = readFile(result);
        try( FileWriter fileWriter = new FileWriter(output, true);
             BufferedWriter bw = new BufferedWriter(fileWriter);
             FileReader fileReader = new FileReader(result);
             BufferedReader bf = new BufferedReader(fileReader)
        ) {
            bw.write("\n"+"QuerryID="+String.valueOf(queryId)+"\n");
            bw.write("Querrie = "+ readFile(question)+"\n");
            List<String> lines = Files.readAllLines(result.toPath());
            for (String line : lines) {
                bw.write(line+"\n");
            }
        } catch (final IOException e) {
            throw new ExceptionInInitializerError(e.getMessage());
        }
    }

    /**
     * Build a file with querieIDs and the corresponding file for easy checking
     * @param question File with question
     * @param result File with result to question
     * @param queryId int with queryID
     */
    private static void buildEvaluationList(File question, File result, Integer queryId){
        File output = new File("output");
        String readFile = readFile(result);
        try( FileWriter fileWriter = new FileWriter(output, true);
             BufferedWriter bw = new BufferedWriter(fileWriter); 
             FileReader fileReader = new FileReader(result);
             BufferedReader bf = new BufferedReader(fileReader)
        ) {
            bw.write("\n"+"QuerryID="+String.valueOf(queryId)+"\n");
            bw.write("Querrie = "+ readFile(question)+"\n");
            List<String> lines = Files.readAllLines(result.toPath());
            for (String line : lines) {
                bw.write(line+"\n");
            }
        } catch (final IOException e) {
            throw new ExceptionInInitializerError(e.getMessage());
        }
    }

    /**
     *
     * @param map to be sorted by value attribute
     * @return the Document with the highest double rating
     */
    private static  List<Map.Entry<File, Double>> sortLinkedMap(Map<File,Double> map){
        List<Map.Entry<File, Double>> entries =
                new ArrayList<Map.Entry<File, Double>>(map.entrySet());
        Collections.sort(entries, new Comparator<Map.Entry<File, Double>>() {
            public int compare(Map.Entry<File, Double> a, Map.Entry<File, Double> b){
                return a.getValue().compareTo(b.getValue());
            }
        });
        return entries;
    }


    private static void createIDFsAndDocNormalizers(Map<File, Map<String,Integer>> nonInvIndex){
        for (File doc : nonInvIndex.keySet()) {
            dNorm.put(doc,0.0);
            for(String term : tokenizeString(readFile(doc))){
                //log((1+totalNumberOfDocuments)/(1+documentFrequency))
                double IDFvalue = Math.log((1.0+totalNumberOfDocuments)/(1.0+invIndex.get(term).size()));
                idf.put(term,IDFvalue);
                double a =  idf.get(term) * nonInvIndex.get(doc).get(term);
                dNorm.put(doc,a*a + dNorm.get(doc));
            }
            dNorm.put(doc,Math.sqrt(dNorm.get(doc)));
        }
    }

    private static void createQuerryIndex(Map<Integer, File> querries){
        for (File querry : querries.values()) {
            List<String> terms = tokenizeString(readFile(querry));
            for (String term : terms) {
                //if nonInvIndex already contains a document and a term already containing that term one then increment
                if(queryIndex.containsKey(querry) && queryIndex.get(querry).containsKey(term)){
                    Map<String,Integer> mapofDocument = queryIndex.get(querry);
                    mapofDocument.put(term,(mapofDocument.get(term)+1));
                    // if nonInvIndex contains document but not that term then put term in doc with count1
                }else if(queryIndex.containsKey(querry)){
                    queryIndex.get(querry).put(term,1);
                    // if doc is not in nonInvIndex then put it with the term it corresponds to
                }else{
                    Map<String,Integer> newMap = new HashMap<>();
                    newMap.put(term,1);
                    queryIndex.put(querry, newMap);
                }
            }
        }

    }

    private static void createNonAndInvIndex( Map<Integer, File> documents) {
        for (File doc : documents.values()) {
            List<String> terms = tokenizeString(readFile(doc));
            for (String term : terms) {
                //if invIndex already contains word and a doc already containing that term once then increment
                if (invIndex.containsKey(term) && invIndex.get(term).containsKey(doc)) {
                    Map<File, Integer> mapOfTerm = invIndex.get(term);
                    mapOfTerm.put(doc, (mapOfTerm.get(doc) + 1));
                // if invIndex contains word already but not with this doc put doc with count 1
                } else if (invIndex.containsKey(term)) {
                    invIndex.get(term).put(doc, 1);
                // if term is new in invIndex put it there with the doc it was found
                } else {
                    Map<File,Integer> newMap = new HashMap<>();
                    newMap.put(doc, 1);
                    invIndex.put(term, newMap);
                }
                //if nonInvIndex already contains a document and a term already containing that term one then increment
                if(nonInvIndex.containsKey(doc) && nonInvIndex.get(doc).containsKey(term)){
                    Map<String,Integer> mapofDocument = nonInvIndex.get(doc);
                    mapofDocument.put(term,(mapofDocument.get(term)+1));
                // if nonInvIndex contains document but not that terresultsm then put term in doc with count1
                }else if(nonInvIndex.containsKey(doc)){
                    nonInvIndex.get(doc).put(term,1);
                // if doc is not in nonInvIndex then put it with the term it corresponds to
                }else{
                    Map<String,Integer> newMap = new HashMap<>();
                    newMap.put(term,1);
                    nonInvIndex.put(doc, newMap);
                }
            }
        }
    }

    /**
     * Splits a string into individual words, trims spaces of, removes punctuation and maps to lowercase.
     * @param fullString String to be tokenized
     * @return List containing all words of String.
     */
    private static List<String> tokenizeString(String fullString) {
        List<String> rawTokens = Arrays.asList(fullString.split("\\W+"));
        List<String> trimmedTokens = rawTokens.stream().map(String::trim).collect(Collectors.toList());
        //List<String> cleanedTokens = trimmedTokens.stream().map(s -> s.replace("\\W+", "")).collect(Collectors.toList());
        List<String> lowercasedToken = trimmedTokens.stream().map(String::toLowerCase).collect(Collectors.toList());
        return lowercasedToken;
    }

    /**
     * Reas a file and returns the content as a string;
     * @param file File
     * @return Contents of file as String
     */
    private static String readFile(File file) {
            String output = "";
            try (BufferedReader bf = new BufferedReader(new FileReader(file))) {
                String line = null;
                StringBuilder sb = new StringBuilder();
                while ((line = bf.readLine()) != null) {
                    sb.append(line);
                }
                output = sb.toString();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        return output;
    }

    /**
     * Reads a direcotry and returns all files and their id as Key
     * @param path path to directory ALL FILE NAMES MUST BE NUMBERS!
     * @return Map wit Files as value and their ID as name
     */
    private static Map<Integer, File> readDirectory(String path) {
        HashMap<Integer, File> map = new HashMap<>();
        try (Stream<Path> paths = Files.walk(Paths.get(path))) {
            paths
                    .filter(Files::isRegularFile)
                    .forEach(e -> map.put(Integer.valueOf(e.toFile().getName()), e.toFile()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return map;
    }
}
